# Multi-architecture Dockerfile for Node.js backend
# Support both ARM64 (Raspberry Pi) and x86 architectures

FROM --platform=$BUILDPLATFORM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies
COPY package.json package-lock.json* ./
RUN \
  if [ -f package-lock.json ]; then npm ci --only=production; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

# Create app user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nodejs

# Copy dependencies
COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy backend source code
COPY --chown=nodejs:nodejs backend/ ./backend/
COPY --chown=nodejs:nodejs package.json ./

# Create necessary directories
RUN mkdir -p uploads test_files
RUN chown -R nodejs:nodejs uploads test_files

USER nodejs

EXPOSE 5001

ENV PORT 5001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

CMD ["node", "backend/server.js"] 